############################ Problem 3 #########################################
##### Part A 

# install.packages("triangle")
library(triangle)

# Deterministic variables
marketSizeGrowth = 0.05
marketShareGrowth = 0.1
unitRevenue = 150 
unitCost = 50 
discountRate = 0.08

num_sim = 1000 # number of simulations
year = 5

# Create function for annual profit
AnnualProfit <- function(year, marketSize, marketSizeGrowth, marketShare, 
                         marketShareGrowth, unitRevenue, unitCost){
  marketSize = marketSize*(1 + marketSizeGrowth)^(year-1)
  marketShare = marketShare*(1 + marketShareGrowth)^(year-1)
  sale = marketSize*marketShare
  annualRevenue = 12 * sale * unitRevenue
  annualCost = 12 * sale * unitCost
  return(annualRevenue - annualCost)
}

# Create function for net present profit 
netPresentProfit <- function(discountRate, profit, year){
  netProfit <- 0
  for (t in 1:year){
    netProfit <- netProfit + profit[t]/(1+discountRate)^t
  }
  return(netProfit)
}


# Set the seed to obtain reproduceable numbers
set.seed(123)

simulated_npv <- c()

# Simulate the net present value
for (i in 1:num_sim){
  marketSize = rnorm(1, mean = 2.2e6, sd = 0.25e6)
  marketShare = runif(1, 0.05, 0.1)
  
  # Project Cost
  rdCost = rtriangle(1, a = 500e6, b = 850e6, c = 750e6)
  clinicalCost = runif(1, 135e6, 170e6)
  projectCost = rdCost + clinicalCost
  
  profit <- AnnualProfit(1:year, marketSize, marketSizeGrowth, marketShare, 
                         marketShareGrowth, unitRevenue, unitCost)
  
  npvProfit <- netPresentProfit(discountRate, profit, year)
  
  npv <- npvProfit - projectCost
  
  simulated_npv <- c(simulated_npv, npv)
}

# Mean net present value over the next 5 years
mean(simulated_npv)

# standard deviation of net present value over the next 5 years
sd(simulated_npv)

##### Part B

# Probability of a negative npv
mean(simulated_npv < 0)

# Histogram of simulated_npv
hist(simulated_npv)
abline(v = 0, col = 'red')

################################## Problem 4 ##################################
#### Part A

set.seed(123)

# Define known constant variables
C = 12 # Cost per unit
R = 18 # Selling price
S = 10 # Salvage value

# Create net profit function 
netProfitFun <- function(D, Q, R, S, C){
  R*min(D, Q) + S*max(0, Q-D) - C*Q
}

# number of simulations
n_sim = 10000

# Set a range of values for Q to evaluate
Qrange <- 35:50

# simulate the demand, given it has a poisson distribution with a mean of 40
d_sim <- rpois(n_sim, 40)

# Estimate profits for each Q
profitMatrix <- matrix(nrow = n_sim, ncol = length(Qrange))

j = 0

for (Q in Qrange){
  j = j+1
  for (i in 1:n_sim){
    profitMatrix[i, j] <- netProfitFun(d_sim[i], Q, R, S, C)
  }
}

# Expected value for each Q 
profit_for_each_Q <- colMeans(profitMatrix)
profit_for_each_Q

cbind(Qrange, profit_for_each_Q)

best_Q_index <- which.max(profit_for_each_Q)
Qrange[best_Q_index]

# Based on the simulations 44 is the optimal purchase quantity

#### Part B

plot(Qrange, colMeans(profitMatrix), ylab = "Expected Profit", xlab = "Q")
abline(v = Qrange[best_Q_index], h = profit_for_each_Q[best_Q_index], col = "red")

# Don't forget to explain the outcome.
